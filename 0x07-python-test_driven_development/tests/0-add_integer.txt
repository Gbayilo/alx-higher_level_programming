# 0-add_integer.txt

===========================
How to Use 0-add_integer.py
===========================

This modul contain one function ``add_integer(a, b=98)`` that add two integers
and return the result of the addition.

Usage
=====

Syntaxs: `add_integer(a, b=98)`
- `a`: first number
- `b`: Secend number
- Return: a + b

::
        >>> add_integer = __import__('0-add_integer').add_integer

Numbers
=======

The function returns the result of the addition of a and b
::
        >>> add_integer(3, 5)
        8

::
        >>> add_integer(-2, -3)
        -5

If `b` is not provided, it defaults to 98.
::
        >>> add_integer(10)
        108

Float values get cast to integers befor performing the addition
::
        >>> add_integer(3.4, 3.9)
        6

::
        >>> add_integer(-3.6, -7.5)
        -10

Combining float and integer arguments is acceptable
::
        >>> add_integer(4, 5.4)
        9

Non-Numbers
===========

The function expect the two arguments to be either integers or floats,
If either arguments is not it will raise a TypeError.
::
        >>> add_integer("test", 7)
        Traceback (most recent call last):
        TypeError: a must be an integer

::
        >>> add_integer(7, "test")
        Traceback (most recent call last):
        TypeError: b must be an integer

::
        >>> add_integer(6, None)
        Traceback (most recent call last):
        TypeError: b must be an integer

::
        >>> add_integer(None)
        Traceback (most recent call last):
        TypeError: a must be an integer

If both a and b are not integeres and not floats the error is raised for
the first argument only (a).
::
        >>> add_integer("test", "test")
        Traceback (most recent call last):
        TypeError: a must be an integer

The function will fail if infinity is provided.
::
	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

::
	>>> add_integer(2, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

The function will fail if NaN numbers is provided.
::
	>>> add_integer(float('nan'))
    	Traceback (most recent call last):
    	ValueError: cannot convert float NaN to integer

::
	>>> add_integer(2, float('nan'))
    	Traceback (most recent call last):
    	ValueError: cannot convert float NaN to integer

The first argument is mandatory to run the function
::
        >>> add_integer()
        Traceback (most recent call last):
        TypeError: add_integer() missing 1 required positional argument: 'a'