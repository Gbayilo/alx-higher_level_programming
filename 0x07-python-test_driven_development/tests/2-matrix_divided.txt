# 2-matrix_divided.txt

=======================================
How to Use 2-matrix_divided.py Module
=======================================

This module contains a function called `matrix_divided(matrix, divisor)` that divides all the numbers of a matrix.

Usage
=====

Syntax: `matrix_divided(matrix, divisor)`
- `matrix`: The matrix to be divided.
- `divisor`: The number to divide by.
- Returns: A new matrix.

::
        >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

The function returns the new matrix after dividing all the elements. Negative and float numbers are accepted, and the result will be rounded to two decimal places.
::
	>>> m1 = [[2, -4, 6], [5, -7, 12.44], [14, 0, 18]]
        >>> matrix_divided(m1, 2)
	[[1.0, -2.0, 3.0], [2.5, -3.5, 6.22], [7.0, 0.0, 9.0]]

The original matrix will not be changed; a new matrix will be returned.
::
	>>> m1 = [[2, -4, 6], [14, 0, 18]]
        >>> matrix_divided(m1, 2)
	[[1.0, -2.0, 3.0], [7.0, 0.0, 9.0]]
	>>> print(m1)
	[[2, -4, 6], [14, 0, 18]]

Invalid Divisor
===============

The value of `div` must be a number or it will raise a TypeError.
::
	>>> m1 = [[2, -4, 6], [5, -7, 12.44], [14, 0, 18]]
        >>> matrix_divided(m1, "test")
        Traceback (most recent call last):
        TypeError: div must be a number

::
	>>> m1 = [[2, -4, 6], [5, -7, 12.44], [14, 0, 18]]
        >>> matrix_divided(m1, None)
        Traceback (most recent call last):
        TypeError: div must be a number

The value of `div` should be different than 0, or it will raise a ZeroDivisionError.
::
	>>> m1 = [[2, -4, 6], [5, -7, 12.44], [14, 0, 18]]
        >>> matrix_divided(m1, 0)
        Traceback (most recent call last):
	ZeroDivisionError: division by zero

Invalid Matrix
==============

The function expects the matrix to be a list of lists, and all its elements must be of type integer or float.
If that is not respected, it will raise a TypeError.

Note that an empty list will raise a TypeError.
::
	>>> m1 = []
        >>> matrix_divided(m1, 2)
        Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats

But an empty matrix will pass.
::
	>>> m1 = [[]]
        >>> matrix_divided(m1, 2)
	[[]]

::
	>>> m1 = [2, 5, 9]
        >>> matrix_divided(m1, 2)
        Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats

::
	>>> m1 = [[2, -4, 6], ['a', 5, 6], ["hello", 8, 9]]
        >>> matrix_divided(m1, 2)
        Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats

::
	>>> m1 = [[2, -4, None], [7, 5, 6], [10, 8, 9]]
        >>> matrix_divided(m1, 2)
        Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats

The function expects all the rows of the matrix to be the same size; if that is not true, it will raise a TypeError.
::
	>>> m1 = [[2, -4, 6], [1, 2, 6, 8], [4, 8]]
        >>> matrix_divided(m1, 2)
        Traceback (most recent call last):
        TypeError: Each row of the matrix must have the same size
